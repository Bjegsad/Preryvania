USE16 ;используем 16битные инструкции и адреса для представления данных
ORG 100h ;программа будет начинаться с адреса 100h

section .code: ;позволяет перемещаться между различными частями программы
		jmp start ;переход по метке start
		
section .data: ;предназначена для хранения данных, которые должны быть инициализированы при загрузке программы
		myfname db "Yuri $"
		mysname db "Chepurin $"

		messNA	db "Programm done$"
		messA	db "Here we go again$"

section .bss: ;для хранения неинициализированных переменных инициализируются нулями при запуске 
		int09h_vect	dw 0,0 ; вектор прерывания, который определяет адрес прерывания по нажатию клавиши
		lB		db 0,0 ;загрузка байта из памяти в регистр
		rB		db 0,0 ;}
	
section .code: ;сам код
	
	start:
		mov	al, 3 ;значение 3 в регистр AL
		int	10h ;прерывание для текстовой и графической информации
		jmp	init ;переход к метке init

	new09h:     		;------------; новый обработчик прерывания INT-09h ----------------------------|
		pusha 		; сохранение регистров (помещает значение из регистра в стек)
		in al, 60h	; читает байт данных из клавиатуры в регистр AL для дальнейшей 
		; je - jump equal
		cmp al, 30h	; если значение регистра AL равно 30h
		je .fname   ;, то перейти к метке .fname.
		
		cmp al, 1eh ; если значение AL равно 30,
		je .sname   ; то происходит переход к метке .sname.
		
		cmp al, 21h ; если значение AL равно 21h
		je .flag    ;то переход к метке flag
		
		cmp al, 48h ;если значение AL равно 48h
		je .up		;то переход к метке up
		
		cmp al, 4bh ;если значение AL равно 4bh
		je .left	;то переход к метке left
		
		cmp al, 50h ;если значение AL равно 50h
		je .down	;то переход к метке down
		
		cmp al, 4dh ;если значение AL равно 4dh
		je .right	;то переход к метке right
		
		popa 				; восстановление регистров (удаляет из стека значения регистров AX, CX, DX, BX, SP, BP, SI и DI.)
		jmp far [cs:int09h_vect]	; переход на старый обработчик (переходу на обработчик клавиатурного прерывания.)
		
	.sys: ; восстановление работы с клавиатурой
		in al, 61h	; взять значениe порта управления клавиатурой
		mov ah, al	; сохранить его
		or al, 80h	; установить бит разрешения для клавиатуры
		out 61h, al	; и вывести его в управляющий порт
		xchg ah, al	; извлечь исходное значение порта
		out 61h, al	; и записать его обратно
		mov al, 20h	; послать сигнал "конец прерывания"
		out 20h, al	; контроллеру прерываний 8259
		ret
	
	.left: ; стрелка влево
		popa  			;удаляет из стека значения регистров AX, CX, DX, BX, SP, BP, SI и DI
		call near .sys	;означает вызов подпрограммы в пределах текущего сегмента памяти
		mov al, 27		;загрузку значения 27 в регистр AL.
		mov ah, 0eh		;загружает значение 0eh в регистр ah
		int 10h			;;прерывание для текстовой и графической информации
		;mov ah, 0eh
		;mov dl, 27
		;int 10h
		iret			;используется для возврата из прерывания.

	.up: ; стрелка вверх
		popa 			;сохранения значений всех регистров общего назначения в стеке
		call near .sys	;для вызова подпрограммы, находящейся в другом сегменте памяти.
		mov dl, 24		;передача значения 24 в регистр DL
		mov ah, 02h		;передача значение 02h в регистр ah
		int 21h			;прерывание 
		iret			;;используется для возврата из прерывания.

	.down: ; стрелка вниз
		popa
		call near .sys
		mov dl, 25
		mov ah, 02h
		int 21h
		iret

	.right: ; стрелка вправо
		popa
		call near .sys
		mov dl, 26
		mov ah, 02h
		int 21h
		iret
	
	.fname: ; имя
		popa			;сохранения значений всех регистров общего назначения в стеке
		call near .sys	;для вызова подпрограммы, находящейся в другом сегменте памяти.
		push ds			;операция помещения содержимого регистра в стек процессора. 
		push cs			; CS - указывает на начало текущего сегмента кода
		pop ds			; DS - это сегментный регистр, который содержит адрес начала сегмента данных в памяти.
		mov ax, 0900h
		mov dx, myfname
		int 21h
		pop ds
		iret

	.sname: ; фамилия
		popa
		call near .sys
		push ds
		push cs
		pop ds
		mov ax, 0900h
		mov dx, mysname
		int 21h
		pop ds
		iret
	
	.flag: ; рисование флага
		mov ax, 000Eh
		int 10h
		mov bx, 0000
		mov ah, 0ch
		
		mov al, 07h
		mov dx, 0h
		mov cx, 0h
		;mov ax, 000E ; видео режим 640x200, 16 цветов ax = E
		;int 10 ; прерывание видео сервис
		;mov bx, 0000
		;mov ah, 0C ; рисования точки
		
	one: 
		int 10h
		inc cx
		cmp cx, 280h ; проверка правого края экрана
		jnz one ; возврат на 112
		mov cx, 0h
		inc dx ; инкремент DX
		cmp dx, 00C8h ; проверка нижнего края экрана
		jnz one
		
		mov al, 04h ; красный цвет
		mov dx, 19h ; верхний
		mov cx, 14h ; левый угол флага
		
	two: 
		int 10h ; прерывание видео сервис
		inc cx ; инкремент CX
		cmp cx, 26Ch ; проверка правого края флага
		jnz two ; возврат на 12D
		mov cx, 14h
		inc dx ; инкремент DX
		cmp dx, 4Bh ; проверка трети от всего размера флага
		jnz two
		
		mov al, 0Fh ; белый цвет
		mov dx, 4Bh ; на одну треть от верха
		mov cx, 14h ; левый угол флага
		
	three: 
		int 10h ; прерывание видео сервис
		inc cx ; инкремент CX
		cmp cx, 26Ch ; проверка правого края флага
		jnz three ; возврат на 147
		mov cx, 14h
		inc dx ; инкремент DX
		cmp dx, 7Dh ; проверка две трети от всего размера флага
		jnz three
		
		mov al, 0Ah ; зеленый цвет
		mov dx, 7Dh ; на две трети от верха
		mov cx, 14h ; левый угол флага
	four:
		int 10h ; прерывание видео сервис
		inc cx ; инкремент CX
		cmp cx, 26Ch ; проверка правого края флага
		jnz four  ; возврат на 161
		mov cx, 14h
		inc dx ; инкремент DX
		cmp dx, 00AFh ; проверка нижнего края флага
		jnz four
		
		mov cx, 0498h ; цикл для небольшой задержки
	timer1:	mov dx, 0498h
	timer2: dec dx
		cmp dx, 0
		jnz timer2
		loop timer1
		xor ah, ah
		mov ah, 00
		mov al, 03
		int 10h
		popa
		jmp far [cs:int09h_vect]

	init:              ;------------; устанавка нового обработчика ----------------------|
		push es
		mov ax, 3509h ; получение текущего обработчика
		int 21h
		mov [int09h_vect], bx
		mov [int09h_vect+2], es
		cmp bx, new09h
		jz already
		pop es
		push ds
		push cs
		pop ds
		mov   ax, 2509h		; меняем вектор 09h
		mov   dx, new09h	; на свой обработичик
		int   21h
		mov ah, 9
		mov dx, messNA
		int 21h
		pop ds
		mov   dx,init	; заносим адрес последней функции в DX
		int   27h	; выходим из программы, оставляя резидента в памяти


	already: ; если резидент уже загружен, будет выведенно сообщение
		mov ah, 9
		mov dx, messA
		int 21h
		mov ah, 0
		int 16h
		int 20h
		